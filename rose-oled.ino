/*********************************************************************
Adapted from Adafruit example sketch that was written by Limor Fried/Ladyada
for Adafruit Industries.
*********************************************************************/

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// If using software SPI (the default case):
#define OLED_MOSI   9
#define OLED_CLK   10
#define OLED_DC    11
#define OLED_CS    12
#define OLED_RESET 13
Adafruit_SSD1306 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);

static const int HEIGHT_OFFSET = 14;

/* Uncomment this block to use hardware SPI
#define OLED_DC     6
#define OLED_CS     7
#define OLED_RESET  8
Adafruit_SSD1306 display(OLED_DC, OLED_RESET, OLED_CS);
*/

// HELPFUL LINK, HOW TO USE GFX LIBRARY
// https://cdn-learn.adafruit.com/downloads/pdf/adafruit-gfx-graphics-library.pdf
// Fun fact:  0 bits aren't "colored in as black"--they're skipped.
// Therefore, two overlapping boxes with what you might think is a
// black outline will appear as one white box since the 0 bits are
// only skipped, not actively set as black.

typedef struct {
    int width, height, x, y;
    const unsigned char *bitmap;
} Petal;

Petal petal_new(int width, int height, int x, int y, const unsigned char *bitmap) {
    Petal petal;
    petal.width = width;
    petal.height = height;
    petal.x = x;
    petal.y = y;
    petal.bitmap = bitmap;
    
    return petal;
}

static const PROGMEM unsigned char stem[]= {
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B01100000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B11000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B10000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B01111110, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000011, B11111111, B11111000, B00000000, B00001100, 
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B11110000, B00111111, B00000000, B00000100, 
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00111111, B00000000, B00000011, B11000000, B00000100, 
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B01111000, B00000000, B00000000, B01111000, B00000000, 
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B11100000, B00000000, B00000000, B00011111, B10110100, 
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B10000000, B00000000, B00000000, B00001111, B00111100, 
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B01111111, B00000000, B00000000, B00000000, B00000110, B01111100, 
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00011000, B00000000, B00000000, B00000000, B00000000, B01111100, 
B00000000, B00011000, B00000000, B00000000, B00000000, B00000011, B11000000, B00000000, B00000000, B00000000, B00000100, B00111000, 
B01100000, B11111000, B00000000, B00000000, B00000001, B10001111, B11111001, B00000000, B00000000, B00000000, B00000111, B11111000, 
B01001110, B00010000, B00000000, B00000000, B00001111, B00111111, B11111100, B00000000, B00000000, B00000000, B00000011, B11110000, 
B00000111, B00000111, B11111000, B00000011, B11111110, B01110000, B11111110, B10010000, B00000000, B00000000, B00000001, B11100000, 
B00000000, B00001111, B11111111, B11111111, B11110000, B00001111, B11111111, B00001000, B00000000, B00000000, B00000000, B11100000, 
B00000000, B00000000, B01111000, B00011111, B00000000, B01111111, B11111110, B00001000, B00000000, B00000000, B00000010, B11100000, 
B00000000, B00000000, B00000001, B10000000, B00000101, B11111111, B11111000, B01000000, B00000000, B00000000, B00000011, B11000000, 
B00000000, B00000000, B00000001, B11100000, B00000000, B01111111, B11100000, B00000000, B00000000, B00000000, B00000011, B10000000, 
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010, B01100000, B00000000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B01111111, B11000000, B00000000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B11111111, B10100000, B00000000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, B00000000, B00000011, B11111111, B01000000, B00000000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, B00000000, B01100111, B11111111, B01000000, B00000000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, B00000011, B11001111, B11111110, B10000000, B00000000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, B00000000, B10111111, B11111101, B10000000, B00000000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, B00000000, B01111111, B11111011, B00000000, B00000000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11100110, B00000000, B00000000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, B00000011, B11111111, B10011100, B00000000, B00000000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, B00001111, B11111000, B01110000, B00000000, B00000000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, B01111000, B00000011, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000
};

// 32 x 28
static const PROGMEM unsigned char petal_one_bmp[]= {
B00000000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00111111, B00000000, 
B00000000, B00000000, B01111111, B10000000, 
B00000000, B00000000, B11111111, B11000000, 
B00000000, B00000001, B11000011, B11000000, 
B00000000, B00000011, B10000000, B01100000, 
B00000000, B00000111, B10000000, B00000000, 
B00000000, B00001111, B00000000, B00000000, 
B00000000, B00011111, B00000000, B00000000, 
B00000000, B00111110, B00000000, B00000000, 
B00000000, B11111100, B00000000, B00000000, 
B00000011, B11111100, B00000000, B00000000, 
B00000111, B11111000, B00000000, B00000000, 
B00001111, B11110000, B00000000, B00000000, 
B00001111, B11110000, B00000000, B00000000, 
B00001111, B11100000, B00000000, B00000000, 
B00011111, B11000000, B00000000, B00000000, 
B00011111, B10000000, B00000000, B00000000, 
B00111110, B00000000, B00000000, B00000000, 
B00111100, B00000000, B00000000, B00000000, 
B00100000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, B00000000
};
Petal petal_one = petal_new(32, 28, 84, 0 + HEIGHT_OFFSET, petal_one_bmp);

// 16 x 24
static const PROGMEM unsigned char petal_two_bmp[]= {
B00000000, B00000000, 
B00000000, B00100000, 
B00000000, B01100000, 
B00000001, B10100000, 
B00000111, B10100000, 
B00001111, B01100000, 
B00000100, B11100000, 
B00000011, B11000000, 
B00001111, B11000000, 
B00011111, B11000000, 
B00011111, B10000000, 
B00011111, B10000000, 
B00011111, B00000000, 
B00011111, B00000000, 
B00001111, B00000000, 
B00001110, B00000000, 
B00001110, B00000000, 
B00001100, B10000000, 
B00001101, B11000000, 
B00001100, B11110000, 
B00001110, B01110000, 
B00000111, B11000000, 
B00000000, B00000000, 
B00000000, B00000000
};
Petal petal_two = petal_new(16, 24, 86, 19 + HEIGHT_OFFSET, petal_two_bmp);

// 24 x 18
static const PROGMEM unsigned char petal_three_bmp[]= {
B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, 
B00000000, B11100000, B00000000, 
B00000001, B00000000, B00001000, 
B00000000, B01111110, B01111100, 
B00000001, B11111111, B11111110, 
B00000101, B11111100, B00011110, 
B00000100, B11110000, B00011110, 
B00001110, B11000000, B00001110, 
B00011110, B11000000, B00000100, 
B00011110, B10000000, B00000000, 
B00111110, B00000000, B00000000, 
B01111100, B00000000, B00000000, 
B01111000, B00000000, B00000000, 
B00100000, B00000000, B00000000, 
B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000
};
Petal petal_three = petal_new(24, 18, 93, 9 + HEIGHT_OFFSET, petal_three_bmp);

// 16 x 28
static const PROGMEM unsigned char petal_four_bmp[]= {
B00000000, B00000100, 
B00000000, B00001110, 
B00000000, B00111110, 
B00000000, B01001110, 
B00000001, B10000000, 
B00000111, B00110000, 
B00001110, B11110000, 
B00001100, B11110000, 
B00001001, B11100000, 
B00011001, B11000000, 
B00010011, B11000000, 
B00010011, B11000000, 
B00010011, B10000000, 
B00111011, B10000000, 
B00111001, B10000000, 
B01111001, B10000000, 
B01111101, B10000000, 
B01111101, B10000000, 
B00111100, B10000000, 
B00011100, B10000000, 
B00001100, B10000000, 
B00000100, B10000000, 
B00000000, B10000000, 
B00000001, B10000000, 
B00000001, B11000000, 
B00000011, B10000000, 
B00000011, B00000000, 
B00000000, B00000000
};
Petal petal_four = petal_new(16, 28, 94, 15 + HEIGHT_OFFSET, petal_four_bmp);

// 24 x 25
static const PROGMEM unsigned char petal_five_bmp[]= {
B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, 
B00000000, B01110000, B00000000, 
B00000001, B11111100, B00000000, 
B00000001, B11111100, B00000000, 
B00000001, B11111110, B00000000, 
B00000000, B11111111, B00000000, 
B00000000, B11111100, B00000000, 
B00000000, B11000000, B01111000, 
B00000000, B10011111, B11110000, 
B00000001, B00111000, B00110000, 
B00000010, B01100000, B00110000, 
B00000110, B11000000, B00000000, 
B00000100, B10000000, B00000000, 
B00001100, B10000000, B00000000, 
B00001100, B00000000, B00000000, 
B00011100, B00000000, B00000000, 
B00011110, B00000000, B00000000, 
B00011100, B00000000, B00000000, 
B00011100, B00000000, B00000000, 
B00011000, B00000000, B00000000, 
B00010000, B00000000, B00000000, 
B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000, 
B00000000, B00000000, B00000000
};
Petal petal_five = petal_new(24, 25, 103, 13 + HEIGHT_OFFSET, petal_five_bmp);

// 16 x 9
static const PROGMEM unsigned char petal_six_bmp[]= {
B00000000, B00000000, 
B00000001, B11000000, 
B00000111, B11000000, 
B00001111, B10000000, 
B00011111, B00000000, 
B00011000, B00010000, 
B00000000, B00010000, 
B00000000, B00000000, 
B00000000, B00000000
};
Petal petal_six = petal_new(16, 9, 109, 24 + HEIGHT_OFFSET, petal_six_bmp);

// 16 x 9
static const PROGMEM unsigned char petal_seven_bmp[]= {
B00000000, B00000000, 
B00000000, B00000000, 
B00000000, B11100000, 
B00011111, B10000000, 
B00011111, B00010000, 
B00011100, B00011000, 
B00010000, B00110000, 
B00000000, B00000000, 
B00000000, B00000000
};
Petal petal_seven = petal_new(16, 9, 109, 28 + HEIGHT_OFFSET, petal_seven_bmp);

// 8 x 9
static const PROGMEM unsigned char petal_eight_bmp[]= {
B00000000, 
B00000000, 
B00101100, 
B00101110, 
B00101110, 
B00001100, 
B00000000, 
B00000000, 
B00000000
};
Petal petal_eight = petal_new(8, 9, 103, 35 + HEIGHT_OFFSET, petal_eight_bmp);

// 16 x 11
static const PROGMEM unsigned char petal_nine_bmp[]= {
B00000000, B00000000, 
B00000000, B00000000, 
B00000000, B00000000, 
B00001000, B00001000, 
B00011000, B00010000, 
B00110000, B00010000, 
B00010000, B00000000, 
B00000010, B01000000, 
B00000001, B10000000, 
B00000000, B00000000, 
B00000000, B00000000
};
Petal petal_nine = petal_new(16, 11, 105, 31 + HEIGHT_OFFSET, petal_nine_bmp);

// 8 x 8
static const PROGMEM unsigned char petal_ten_bmp[]= {
B00000000, 
B00000000, 
B00000000, 
B00000000, 
B01100100, 
B00101000, 
B00000000, 
B00000000
};
Petal petal_ten = petal_new(8, 8, 108, 32 + HEIGHT_OFFSET, petal_ten_bmp);

Petal petals[] = {petal_one, petal_two, petal_three, petal_four, petal_five, petal_six, petal_seven, petal_eight, petal_nine, petal_ten};
int current_petal = 0;
int total_petals = 10;

#if (SSD1306_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif

void setup()   {                
  Serial.begin(9600);

  // by default, we'll generate the high voltage from the 3.3v line internalply! (neat!)
  display.begin(SSD1306_SWITCHCAPVCC);
  // init done
  
  // Show image buffer on the display hardware.
  // Since the buffer is intialized with an Adafruit splashscreen
  // internally, this will display the splashscreen.
  display.display();
  delay(2000);

  // Clear the buffer.
  display.clearDisplay();
}


void loop() {
  display.clearDisplay();
  // Draw stem
  display.drawBitmap(0, 3 + HEIGHT_OFFSET, stem, 96, 35, 1);

//  Serial.println(petal_one.x);
  if(current_petal < total_petals) {
    if(petals[current_petal].x > 0) {
      petals[current_petal].x -= 1;
    } else {
      current_petal += 1;
    }
  }
  
  drawPetals();
  display.display();
//  delay(500);
}

void drawPetals() {
  for (int i = 0; i < 10; i++) {
    Petal petal = petals[i];
    display.drawBitmap(petal.x, petal.y, petal.bitmap, petal.width, petal.height, 1);
  }
}

